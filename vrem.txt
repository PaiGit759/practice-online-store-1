<div className="div4">
          {currentTutorial ? (
         
          <Container>
           <Row>
             <Col xs={12}> 
                <h2 id="headerGoods">Goods</h2> 
             </Col>
           </Row>
           <Row>
            <Col xs={5}>
              <img src={${currentTutorial.img}} className="img2" alt={"*"} />/////********
              <img src={`${currentTutorial.img}`} className="img2" alt={"*"} />
            </Col>


            <Col xs={7}>
              <div>
                <label>
                  <strong>Title:</strong>
                </label>{" "}
                {currentTutorial.title}
              </div>
              <div>
                <label>
                  <strong>Description:</strong>
                </label>{" "}
                {currentTutorial.description}
              </div>
              <div>
                <label>
                  <strong>Price:</strong>
                </label>{" "}
                {currentTutorial.price} 
                 <span> kr</span> 
              </div>
              <div>
                <label>
                  <strong>Discount:</strong>
                </label>{" "}
                {currentTutorial.discount}
                 <span> %</span>
              </div>
              <div>
                <label>
                  <strong>Status:</strong>
                </label>{" "}
                {currentTutorial.published ? "Published" : "Pending"}
              </div>
            </Col>
           </ Row>
          </Container>
          
          ) : (
            <div>
              <br />
              <p>Please click on a goods...99999</p>
            </div>
          )}
        </div>




        < div className="div4">
          {currentTutorial ? (
            <div>
              <h4>Goods</h4>
              <img src={`${currentTutorial.img}`} className="img2" alt={"*"} />
              <div>
                <label>
                  <strong>Title:</strong>
                </label>{" "}
                {currentTutorial.title}
              </div>
              <div>
                <label>
                  <strong>Description:</strong>
                </label>{" "}
                {currentTutorial.description}
              </div>

              <div>
                <label>
                  <strong>Price:</strong>
                </label>{" "}
                {currentTutorial.price}
              </div>
              
              <div>
                <label>
                  <strong>Discount:</strong>
                </label>{" "}
                {currentTutorial.discount}
              </div>

              <div>
                <label>
                  <strong>Status:</strong>
                </label>{" "}
                {currentTutorial.published ? "Published" : "Pending"}
              </div>

            </div>
          ) : (
            <div>
              <br />
              <p>Please click on a goods...</p>
            </div>
          )}
        </div>



////http://localhost:8080/api/auth/signup
{
"username" : "pai",
"email" : "panig789@gmail.com",
"password" : "Pai321789",
"roles" : ["admin"]
}

{
"username" : "tanya",
"email" : "tanya789@gmail.com",
"password" : "Tanya321",
"roles" : ["admin"]
}

MongoDb Atlas pai MongoPai789

mongodb+srv://pai:MongoPai789@paipractice9.mk7qxu7.mongodb.net/test

npm install dotenv --save



                      <Link className="badge badge-warning">
                        Add to Basket
                      </Link>


                      const columnDefsLeft = [
  { headerName: 'Function', field: 'function', minWidth: 150 },
  { headerName: 'Value', field: 'value' },
  { headerName: 'Times 10', valueGetter: 'getValue("value") * 10' },
];

const rowDataLeft = [
  { function: 'Number Squared', value: '=ctx.theNumber * ctx.theNumber' },
  { function: 'Number x 2', value: '=ctx.theNumber * 2' },
  { function: "Today's Date", value: '=new Date().toLocaleDateString()' },
  { function: 'Sum A', value: '=ctx.sum("a")' },
  { function: 'Sum B', value: '=ctx.sum("b")' },
];

const gridOptionsLeft = {
  columnDefs: columnDefsLeft,
  defaultColDef: {
    flex: 1,
  },
  enableCellExpressions: true,
  rowData: rowDataLeft,
  context: {
    theNumber: 4,
  },
};

///// Right table
const columnDefsRight = [
  {
    headerName: 'A',
    field: 'a',
    width: 150,
    editable: true,
    valueSetter: numberNewValueHandler,
    onCellValueChanged: cellValueChanged,
  },
  {
    headerName: 'B',
    field: 'b',
    width: 150,
    editable: true,
    valueSetter: numberNewValueHandler,
    onCellValueChanged: cellValueChanged,
  },
];

const rowDataRight = [
  { a: 1, b: 22 },
  { a: 2, b: 33 },
  { a: 3, b: 44 },
  { a: 4, b: 55 },
  { a: 5, b: 66 },
  { a: 6, b: 77 },
  { a: 7, b: 88 },
];

const gridOptionsRight = {
  columnDefs: columnDefsRight,
  defaultColDef: {
    flex: 1,
  },
  rowData: rowDataRight,
};

gridOptionsLeft.context.sum = function (field) {
  var result = 0;
  rowDataRight.forEach(function (item) {
    result += item[field];
  });
  return result;
};

// tell Left grid to refresh when number changes
function onNewNumber(value) {
  gridOptionsLeft.context.theNumber = new Number(value);
  gridOptionsLeft.api.redrawRows();
}

// we want to convert the strings to numbers
function numberNewValueHandler(params) {
  var valueAsNumber = parseFloat(params.newValue);
  var field = params.colDef.field;
  var data = params.data;
  data[field] = valueAsNumber;
  return true;
}

// we want to tell the Left grid to refresh when the Right grid values change
function cellValueChanged(params) {
  gridOptionsLeft.api.redrawRows();
}

// setup the grid after the page has finished loading
document.addEventListener('DOMContentLoaded', function () {
  var gridDivLeft = document.querySelector('#myGridLeft');
  new agGrid.Grid(gridDivLeft, gridOptionsLeft);
  var gridDivRight = document.querySelector('#myGridRight');
  new agGrid.Grid(gridDivRight, gridOptionsRight);
});


<Link to={{
            pathname: "/search",
            propsSearch: myData
        }}>Ссылка</ Link>


На странице "/search" данные можно достать так:

import React from 'react';
import {Redirect} from 'react-router-dom';

export default function Search(props) {
   console.log(props.location.propsSearch); // Наши переданные данные
   //Но учтите, что они будут доступны только, при переходе по этой ссылке. 
   //Если страницу перезагрузить, то получим - undefined. 
   //Это решается редиректом обратно, если нет пропса:
   if (!props.location.propsSearch) return <Redirect to="/firstpage" />;
...
}

